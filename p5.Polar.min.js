//       ____   ____       _            
//  _ __| ___| |  _ \ ___ | | __ _ _ __ 
// | '_ \___ \ | |_) / _ \| |/ _` | '__|
// | |_) |__) ||  __/ (_) | | (_| | |   
// | .__/____(_)_|   \___/|_|\__,_|_|   
// |_|   
// https://github.com/liz-peng/p5.Polar
// Created by Liz Peng
// Version 2.2 Aug 13th 2023             
// let each sketches have their center point
p5.prototype.setCenter=function(t,s){void 0===this.center?this.center={x:t,y:s}:this.translate(this.center.x=t,this.center.y=s)}
// Triangle
,p5.prototype.polarTriangle=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)),this.triangle(this.sin(0),this.cos(0)*-s,this.sin(1*this.TWO_PI/3)*s,this.cos(1*this.TWO_PI/3)*-s,this.sin(2*this.TWO_PI/3)*s,this.cos(2*this.TWO_PI/3)*-s),this.pop()},p5.prototype.polarTriangles=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarTriangle(t[0]*t[1],t[2],t[3])}else this.polarTriangle(n*h,s,i)}
// Ellipse
,p5.prototype.polarEllipse=function(t,s,i,o){this.push();const h=this.radians(t);this.translate(this.sin(h)*o,this.cos(h)*-o),this.rotate(this.radians(t)),this.ellipse(0,0,2*s,2*i),this.pop()},p5.prototype.polarEllipses=function(t,s,i,o,h){const n=360/t;for(let p=1;p<=t;p++)if(h){const t=h(p,n,s,i,o);this.polarEllipse(t[0]*t[1],t[2],t[3],t[4])}else this.polarEllipse(p*n,s,i,o)}
// Line
,p5.prototype.polarLine=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)),this.line(0,s,0,-s),this.pop()},p5.prototype.polarLines=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarLine(t[0]*t[1],t[2],t[3])}else this.polarLine(n*h,s,i)}
// Square
,p5.prototype.polarSquare=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)),this.square(-s,-s,2*s),this.pop()},p5.prototype.polarSquares=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarSquare(t[0]*t[1],t[2],t[3])}else this.polarSquare(n*h,s,i)}
// Pentagon
,p5.prototype.polarPentagon=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)+60),this.beginShape();for(let t=1;t<=5;t++)this.vertex(this.cos(this.TWO_PI*t/5)*s,this.sin(this.TWO_PI*t/5)*s);this.endShape(this.CLOSE),this.pop()},p5.prototype.polarPentagons=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarPentagon(t[0]*t[1],t[2],t[3])}else this.polarPentagon(n*h,s,i)}
// Hexagon
,p5.prototype.polarHexagon=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)),this.beginShape();for(let t=0;t<6;t++)this.vertex(this.cos(this.TWO_PI*t/6)*s,this.sin(this.TWO_PI*t/6)*s);this.endShape(this.CLOSE),this.pop()},p5.prototype.polarHexagons=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarHexagon(t[0]*t[1],t[2],t[3])}else this.polarHexagon(n*h,s,i)}
// Heptagon
,p5.prototype.polarHeptagon=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)+11),this.beginShape();for(let t=1;t<=7;t++)this.vertex(this.cos(this.TWO_PI*t/7)*s,this.sin(this.TWO_PI*t/7)*s);this.endShape(this.CLOSE),this.pop()},p5.prototype.polarHeptagons=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarHeptagon(t[0]*t[1],t[2],t[3])}else this.polarHeptagon(n*h,s,i)}
// Octagon
,p5.prototype.polarOctagon=function(t,s,i){this.push();const o=this.radians(t);this.translate(this.sin(o)*i,this.cos(o)*-i),this.rotate(this.radians(t)),this.beginShape();for(let t=1;t<=8;t++)this.vertex(this.cos(this.TWO_PI*t/8)*s,this.sin(this.TWO_PI*t/8)*s);this.endShape(this.CLOSE),this.pop()},p5.prototype.polarOctagons=function(t,s,i,o){const h=360/t;for(let n=1;n<=t;n++)if(o){const t=o(n,h,s,i);this.polarOctagon(t[0]*t[1],t[2],t[3])}else this.polarOctagon(n*h,s,i)}
// Polygon
,p5.prototype.polarPolygon=function(t,s,i,o){this.push();const h=this.radians(s);this.translate(this.sin(h)*o,this.cos(h)*-o),this.rotate(this.radians(s)),this.beginShape();for(let s=1;s<=t;s++)this.vertex(this.cos(this.TWO_PI*s/t)*i,this.sin(this.TWO_PI*s/t)*i);this.endShape(this.CLOSE),this.pop()},p5.prototype.polarPolygons=function(t,s,i,o,h){const n=360/t;for(let p=1;p<=t;p++)if(h){const t=h(p,n,s,i,o);this.polarPolygon(t[2],t[0]*t[1],t[3],t[4])}else this.polarPolygon(s,p*n,i,o)}
// Custom Function
// NOTE: polarCustomFunction() and polarCustomFunctions() call a user-defined draw method with a required `_radius` parameter and the option for additional params. This method is not defined in the p5.Polar library, and therefore needs to be instantiated in the user's project and specified as the _function parameter when calling polarCustomFunction().
,p5.prototype.polarCustomFunction=function(t,s,i,o,...h){this.push();const n=this.radians(s);this.translate(this.sin(n)*o,this.cos(n)*-o),this.rotate(this.radians(s)),t(i,...h),this.pop()}
// Custom Functions
,p5.prototype.polarCustomFunctions=function(t,s,i,o,h,...n){const p=360/s;for(let e=1;e<=s;e++)if(h){const s=h(t,e,p,i,o,...n);this.polarCustomFunction(s[0],s[1]*s[2],s[3],s[4],...s[5])}else this.polarCustomFunction(t,e*p,i,o,...n)};
//# sourceMappingURL=p5.Polar.min.js.map